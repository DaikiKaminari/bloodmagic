-- [V0.3]
--- GLOBAL VARIABLES ---
local config            -- table : configuration
local altar             -- table : altar (peripheral)
local wantedChest       -- table : container containing the "wanted output item" (peripheral)
local inputChest        -- table : container contaning input items (peripheral)
local outputChest       -- table : container containing output items (periphral)
local inputRecipeChest  -- table : container contaning input item for new recipe (peripheral)
local outputRecipeChest -- table : container contaning output item for new recipe (peripheral)

--- INIT ---
local function init()
    print("\n--- INIT startup ---")
    if not fs.exists("lib/json") then
        shell.run("pastebin get 4nRg9CHU lib/json")
    end
end

local function loadAPI(apis)
    for _,v in pairs(apis) do
        print("Loading API : " .. v)
        os.loadAPI(v)
        print("API " .. v .. " loaded !")
    end
    print("")
end

local function logs()
    local mon = peripheral.wrap(config.monitor)
    if mon ~= nil then
        term.redirect(mon)
        term.clear()
    end
end

--- CONFIG ---
local function getPeripheral(side)
    local p = peripheral.wrap(side)
    if p == nil then
        error("Peripheral on side " .. side .. " not found")
    end
    return p
end

--- UTILS ---
local function hasRedstoneSignal()
    for _,v in pairs(redstone.getSides()) do
        if redstone.getInput(v) then
            return true
        end
    end
    return false
end

-- send an item to the altar, neededItemID may be specified
local function sendItemToAltar(side, neededItemID, quantity)
    local slot = item.getSlotOfItem(inputChest, neededItemID)
    if slot ~= -1 then -- if the item is present in the input chest
        inputChest.pushItem(side, slot, quantity) -- push 1 needed item from input chest to the altar
    end
end

--- FUNCTIONS ---
-- process a new item
local function processItem(side, wantedItemID, typeCrafting)
    local neededItemID = recipesManager.getInputItem(config.jsonRecipes, wantedItemID)
    if typeCrafting == "auto" then
        print("Begin process of [" .. neededItemID .. "] to get [" .. wantedItemID .. "]")
        while item.containsItem(inputChest, neededItemID) do
            if neededItemID == nil then
                print("\nNeeded item for [" .. wantedItemID .. "] not found.")
                break
            else
                if not item.containsItem(altar) then
                    sendItemToAltar(side, neededItemID, 1)
                end
            end
            sleep(0)
        end
    end
    if typeCrafting == "manual" then
        while item.containsItem(wantedChest) do
            if not item.containsItem(altar) then
                sendItemToAltar(side, neededItemID, 1)
            end
            sleep(0)
        end
    end
end

-- manage the altar
local function manageAltar()
    local wantedItemID
    local neededItemID
    print("\nSearching for a wanted item ...")
    while true do
        if item.containsItem(wantedChest) then -- manual crafting
            print("Manual crafting detected.")
            wantedItemID = item.getItemIDFromSlot(wantedChest, 1)
            print("Wanted item is : [" .. wantedItemID .. "]")
            processItem("NORTH", wantedItemID, "manual")
            print("\nSearching for a wanted item ...")
            item.pushItem(altar, "SOUTH") -- send all items from the altar into the output chest
        else
            if item.containsItem(inputChest) then -- auto crafting
                print("Auto crafting detected.")
                local slot = item.getSlotOfItem(inputChest)
                neededItemID = item.getItemIDFromSlot(inputChest, slot)
                wantedItemID = recipesManager.getOutputItem(config.jsonRecipes, neededItemID)
                if wantedItemID == nil then
                    print("No wanted item found for [" .. neededItemID .. "]")
                else
                    print("Wanted item is : [" .. wantedItemID .. "]")
                    processItem("NORTH", wantedItemID, "auto")
                    print("\nSearching for a wanted item ...")
                end
            end
        end
        sleep(1)
    end
end

-- manage adding and editing recipes
local function manageRecipes()
    while true do
        if hasRedstoneSignal() then
            if (not item.containsItem(inputRecipeChest)) or (not item.containsItem(outputRecipeChest)) then
                print("\nItem not found in input or output recipe chest.")
                print("Recipe not added.")
            else
                recipesManager.addItem(config.jsonRecipes, inputRecipeChest, outputRecipeChest)
                sleep(1)
            end
        end
        sleep(1)
    end
end

--- MAIN ---
local function main()
    -- Init
    init()
    loadAPI({"recipesManager", "lib/item", "lib/objectJSON"})
    recipesManager.init()
    objectJSON.init()

    -- Loading config
    config = objectJSON.decodeFromFile("config")
    logs()
    altar = getPeripheral(config.altar)
    wantedChest = getPeripheral(config.wantedChest)
    inputChest = getPeripheral(config.inputChest)
    outputChest = getPeripheral(config.outputChest)
    inputRecipeChest = getPeripheral(config.inputRecipeChest)
    outputRecipeChest = getPeripheral(config.outputRecipeChest)

    -- Begin
    while true do
        parallel.waitForAll(manageAltar, manageRecipes)
        sleep(0)
    end
    
end

main()