-- [V0.3]
--- GLOBAL VARIABLES ---
local config            -- table : configuration
local altar             -- table : altar (peripheral)
local wantedChest       -- table : container containing the "wanted output item" (peripheral)
local inputChest        -- table : container contaning input items (peripheral)
local outputChest       -- table : container containing output items (periphral)
local inputRecipeChest  -- table : container contaning input item for new recipe (peripheral)
local outputRecipeChest -- table : container contaning output item for new recipe (peripheral)

--- INIT ---
local function init()
    local mon = peripheral.find("monitor")
    if mon ~= nil then
        term.redirect(mon)
    end
    print("\n--- INIT startup ---")
    if not fs.exists("lib/json") then
        shell.run("pastebin get 4nRg9CHU lib/json")
    end
end

local function loadAPI(apis)
    for _,v in pairs(apis) do
        print("Loading API : " .. v)
        os.loadAPI(v)
        print("API " .. v .. " loaded !")
    end
    print("")
end

--- CONFIG ---
local function getPeripheral(side)
    local p = peripheral.wrap(side)
    if p == nil then
        error("Peripheral on side " .. side .. " not found")
    end
    return p
end

--- UTILS ---

local function hasRedstoneSignal()
    for _,v in pairs(redstone.getSides()) do
        if redstone.getInput(v) then
            return true
        end
    end
    return false
end

local function pushItemToAltar(inputChest, side, neededItemID, quantity)
    local slot = item.getSlotOfItem(inputChest, neededItemID)
    if slot ~= -1 then -- needed item slot in the input chest
        inputChest.pushItem("NORTH", slot, quantity) -- send 1 item from the input chest into the altar
    end
end

--- FUNCTIONS ---
-- manage input and output of a specified item
local function newItemToProcess(wantedItemID, neededItemID)
    while item.slotContainsItem(wantedChest, 1) or not item.containsItem(inputChest) do -- continue until the item is removed from wanted chest or input chest is empty
        if item.containsItem(altar) then -- if the altar contains items
            if item.slotContainsItem(altar, 1, wantedItemID) then -- altar contains wanted item
                item.pushItem(altar, "NORTH") -- send all items from the altar into the output chest
                pushItemToAltar(inputChest, "NORTH", neededItemID, 1) -- if there is needed intem in input chest then send 1 to altar
            end
        else -- if the altar is empty
            if item.containsItem(inputChest) then -- if the input chest contains items
                pushItemToAltar(inputChest, "NORTH", neededItemID, 1) -- if there is needed intem in input chest then send 1 to altar
            end
        end
        sleep(1)
    end
    print("Removed item")
end

-- returns wanted item ID
local function wantedOutputID()
    print("\nSearching for a wanted item ...")
    while true do
        if item.slotContainsItem(wantedChest, 1) then -- if there is something in the wanted chest
            print("Manual crafting detected.")
            wantedItemID = wantedChest.getStackInSlot(1).id
            print("Item found ! It is : " .. wantedItemID)
                return wantedItemID
        else -- if there is nothing in the wanted chest
            if item.containsItem(inputChest) then -- if the input chest contains any item
                print("Auto crafting detected.")
                local slot = item.getSlotOfItem(inputChest) -- get the slot of the 1st item
                local inputItemID = inputChest.getStackInSlot(slot).id -- get the input item in input chest
                wantedItemID = recipesManager.getOutputItem(config.jsonRecipes, inputItemID) -- get corresponding output item according to the recipe
                print("Item found ! It is : " .. wantedItemID)
                return wantedItemID
            end
        end
        sleep(1)
    end
end


-- manage the altar
local function manageAltar()
    local wantedItemID
    local neededItemID
    while true do
        wantedItemID = wantedOutputID()
        neededItemID = recipesManager.getInputItem(config.jsonRecipes, wantedItemID)
        if neededItemID == nil then -- if no ID found for specified craft
            print("\nNeeded ID for " .. wantedItemID .. " not found.")
            while item.slotContainsItem(wantedChest, 1) do -- wait until item is removed from wantedChest
                sleep(1)
            end
        else
            newItemToProcess(wantedItemID, neededItemID)
            item.pushItem(altar, "SOUTH") -- send all items from the altar into the output chest
        end
        sleep(1)
    end
end

-- manage adding and editing recipes
local function manageRecipes()
    while true do
        if hasRedstoneSignal() then
            if (not item.containsItem(inputRecipeChest)) or (not item.containsItem(outputRecipeChest)) then
                print("\nItem not found in input or output recipe chest.")
                print("Recipe not added.")
            else
                recipesManager.addItem(config.jsonRecipes, inputRecipeChest, outputRecipeChest)
                sleep(1)
            end
        end
        sleep(1)
    end
end

--- MAIN ---
local function main()
    -- Init
    init()
    loadAPI({"recipesManager", "lib/item", "lib/objectJSON"})
    recipesManager.init()
    objectJSON.init()

    -- Loading config
    config = objectJSON.decodeFromFile("config")
    altar = getPeripheral(config.altar)
    wantedChest = getPeripheral(config.wantedChest)
    inputChest = getPeripheral(config.inputChest)
    outputChest = getPeripheral(config.outputChest)
    inputRecipeChest = getPeripheral(config.inputRecipeChest)
    outputRecipeChest = getPeripheral(config.outputRecipeChest)

    -- Begin
    while true do
        parallel.waitForAll(manageAltar, manageRecipes)
        sleep(0)
    end
    
end

main()