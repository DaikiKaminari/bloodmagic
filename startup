-- [V0.1]
--- GLOBAL VARIABLES ---
local config            -- table : configuration
local altar             -- table : altar (peripheral)
local wantedChest       -- table : container containing the "wanted output item" (peripheral)
local inputChest        -- table : container contaning input items (peripheral)
local outputChest       -- table : container containing output items (periphral)
local inputRecipeChest  -- table : container contaning input item for new recipe (peripheral)
local outputRecipeChest -- table : container contaning output item for new recipe (peripheral)

--- INIT ---
local function init()
    local mon = peripheral.find("monitor")
    if mon ~= nil then
        term.redirect(mon)
    end
    print("\n--- INIT startup ---")
    if not fs.exists("lib/json") then
        shell.run("pastebin get 4nRg9CHU lib/json")
    end
    os.loadAPI("lib/json")
    print("lib/json loaded")
end

local function loadAPI(apis)
    for _,v in pairs(apis) do
        print("Loading API : " .. v)
        os.loadAPI(v)
        print("API " .. v .. " loaded !")
    end
    print("")
end

--- CONFIG ---
local function getPeripheral(side)
    local p = peripheral.wrap(side)
    if p == nil then
        error("Peripheral on side " .. side .. " not found")
    end
    return p
end

--- UTILS ---

local function hasRedstoneSignal()
    for _,v in pairs(redstone.getSides()) do
        if redstone.getInput(v) then
            return true
        end
    end
    return false
end

--- FUNCTIONS ---
local function wantedOutputID(container)
    print("\nSearching for a wanted item ...")
    while not item.slotContainsItem(container, 1) do
        sleep(1)
    end
    local slotInfo = container.getStackInSlot(1)
    print("Item found ! It is : " .. slotInfo.display_name)
    return slotInfo.id
end

local function newItemToProcess(wantedID)
    while item.slotContainsItem(wantedChest, 1) or not item.containsItem(inputChest) do -- continue until the item is removed from wanted chest or input chest is empty
        if item.containsItem(altar) then -- if the altar contains items
            if item.slotContainsItem(altar, 1, wantedID) then -- altar contains wanted item
                item.pushItem(altar, "NORTH") -- send all items from the altar into the output chest
                if item.containsItem(inputChest) then -- if the input chest contains items
                    item.pushItem(inputChest, "NORTH", 1) -- send 2 items from the input chest to the altar
                end
            end
        else -- if the altar is empty
            if item.containsItem(inputChest) then -- if the input chest contains items
                item.pushItem(inputChest, "NORTH", 1) -- send 2 items from the input chest to the altar
            end
        end
        sleep(1)
    end
    print("Removed item")
end

local function manageRecipes()
    while true do
        if hasRedstoneSignal() then
            recipesManager.addItem(config.jsonRecipes, inputRecipeChest, outputRecipeChest)
            sleep(1)
        end
        sleep(1)
    end
end

local function gestionAltar()
    local wantedID = wantedOutputID(wantedChest)
    while true do
        newItemToProcess(wantedID)
        item.pushItem(altar, "NORTH") -- send all items from the altar into the output chest
        wantedID = wantedOutputID(wantedChest)
    end
end

--- MAIN ---
local function main()
    -- Init
    init()
    loadAPI({"recipesManager", "lib/item", "lib/objectJSON"})
    recipesManager.init()
    objectJSON.init()

    -- Loading config
    config = objectJSON.decodeFromFile("config")
    altar = getPeripheral(config.altar)
    wantedChest = getPeripheral(config.wantedChest)
    inputChest = getPeripheral(config.inputChest)
    outputChest = getPeripheral(config.outputChest)
    inputRecipeChest = getPeripheral(config.inputRecipeChest)
    outputRecipeChest = getPeripheral(config.outputRecipeChest)

    -- Begin
    while true do
        parallel.waitForAll(gestionAltar, manageRecipes)
    end
    
end

main()